{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/components/bio.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","location","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_components_bio__WEBPACK_IMPORTED_MODULE_2__","map","_ref","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","gatsby__WEBPACK_IMPORTED_MODULE_1__","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_github__WEBPACK_IMPORTED_MODULE_1__","typography_theme_github__WEBPACK_IMPORTED_MODULE_1___default","typography","Typography","Github","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","BlogImage","_public_static_d_3299874284_json__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","blogIcon","childImageSharp","Layout","children","marginLeft","marginRight","maxWidth","padding","gatsby__WEBPACK_IMPORTED_MODULE_3__","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Bio","_public_static_d_1197910907_json__WEBPACK_IMPORTED_MODULE_1__","_data$site$siteMetada","social","display","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","avatar","alt","minWidth","borderRadius","imgStyle","href","twitter","react_icons__WEBPACK_IMPORTED_MODULE_4__","Provider","value","color","size","react_icons_fa__WEBPACK_IMPORTED_MODULE_5__","instagram","github"],"mappings":"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","file":"component---src-pages-index-js-b521a7ef5227c4971fbe.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </section>\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import Typography from \"typography\";\nimport Github from \"typography-theme-github\";\n\n\nconst typography = new Typography(Github)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\";\nimport { rhythm, scale } from \"../utils/typography\"\n\nconst BlogImage = () => {\n\tconst data = useStaticQuery(graphql`\n\t\t\tquery BlogImageQuery{\n\t\t\t\tblogIcon: file(absolutePath: { regex: \"/blogIcon.png/\"}) {\n\t\t\t\t\tchildImageSharp {\n\t\t\t\t\t\tfixed(width: 800, height: 200){\n\t\t\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`)\n\treturn (\n\t\t<Image fixed={data.blogIcon.childImageSharp.fixed} />\n\t)\n}\n\nclass Layout extends React.Component {\n\trender() {\n    const { children } = this.props\n    return (\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(24),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n        }}\n      >\n        <header>\n\t\t\t\t\t<Link to={`/`}>\n\t\t\t\t\t\t<BlogImage />\n\t\t\t\t\t</Link>\n\t\t\t\t</header>\n        <main>{children}</main>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\";\nimport { IconContext } from \"react-icons\";\nimport { FaTwitter, FaInstagram, FaGithub } from \"react-icons/fa\";\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n\t\t\t\t\t\ttwitter,\n\t\t\t\t\t\tinstagram,\n\t\t\t\t\t\tgithub\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n\t\t\t\tWritten by <strong>{author}</strong>. I'm a Self taught Developer who has done Game Programming then pivoted to Web Development using powerful frameworks/libraries such as Angular and React. I approach everyday as a chance to improve my programming skills, to learn new frameworks, and to challenge myself.\n\t\t\t\t<br />\n\t\t\t\t<a href={`https://twitter.com/${social.twitter}`}>\n\t\t\t\t\t<IconContext.Provider value={{color: \"black\", size: \"2em\"}}>\n\t\t\t\t\t\t<FaTwitter />\n\t\t\t\t\t</IconContext.Provider>\n\t\t\t\t</a>\n\t\t\t\t{\" \"}\n\t\t\t\t<a href={`https://instagram.com/${social.instagram}`}>\n\t\t\t\t\t<IconContext.Provider value={{color: \"black\", size: \"2em\"}}>\n\t\t\t\t\t\t<FaInstagram />\n\t\t\t\t\t</IconContext.Provider>\n\t\t\t\t</a>\n\t\t\t\t{\" \"}\n\t\t\t\t<a href={`https://github.com/${social.github}`}>\n\t\t\t\t\t<IconContext.Provider value={{color: \"black\", size: \"2em\"}}>\n\t\t\t\t\t\t<FaGithub />\n\t\t\t\t\t</IconContext.Provider>\n\t\t\t\t</a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n"],"sourceRoot":""}